//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\bilsa\AppData\Roaming\RapidEditor\Extensions\Rapid_Extensions_Antlr\code_gen\201802\18\05\06\27_863\RSHARPParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class RSHARPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		S_EXCL_EQ=1, S_PCNT_EQ=2, S_AND_AND=3, S_AND_EQ=4, S_LP=5, S_RP=6, S_ASTE_EQ=7, 
		S_COMMA=8, S_DOT=9, S_SLASH_EQ=10, S_COLON=11, S_SEMI=12, S_QM=13, S_ACCENT_CIRC_EQ=14, 
		S_LW=15, S_OR_OR=16, S_OR_EQ=17, S_RW=18, S_PLUS_EQ=19, S_LT=20, S_LT_LT_EQ=21, 
		S_LT_EQ=22, S_EQ=23, S_HYPHEN_MINUS_EQ=24, S_EQ_EQ=25, S_EQ_GT=26, S_GT=27, 
		S_GT_EQ=28, S_GT_GT_EQ=29, S_GT_GT_GT_EQ=30, CLASS=31, ELSE=32, ENUM=33, 
		FOR=34, FOREACH=35, IF=36, IN=37, INTERFACE=38, INTERNAL=39, NAMESPACE=40, 
		NEW=41, NullLiteral=42, OVERRIDE=43, PRIVATE=44, PROTECTED=45, PUBLIC=46, 
		READONLY=47, RETURN=48, STRUCT=49, THEN=50, WHILE=51, IntegerLiteral=52, 
		FloatingPointLiteral=53, BooleanLiteral=54, CharacterLiteral=55, StringLiteral=56, 
		Identifier=57, WS=58, SINGLE_LINE_DOC_COMMENT=59, DELIMITED_DOC_COMMENT=60, 
		SINGLE_LINE_COMMENT=61, DELIMITED_COMMENT=62, ERRCHAR=63;
	public const int
		RULE_document = 0, RULE_topStatements = 1, RULE_topStatement = 2, RULE_namespaceDeclaration = 3, 
		RULE_namespaceBody = 4, RULE_typeDeclaration = 5, RULE_typeDeclModifier = 6, 
		RULE_typeDeclType = 7, RULE_typeDeclArgs = 8, RULE_typeDeclBody = 9, RULE_typeDeclBodyStatements = 10, 
		RULE_typeDeclBodyStatement = 11, RULE_memberDeclaration = 12, RULE_memberArgsDecl = 13, 
		RULE_memberReturn = 14, RULE_memberDeclBody = 15, RULE_memberModifier = 16, 
		RULE_codeBlock = 17, RULE_codeBlockOrValue = 18, RULE_blockStatements = 19, 
		RULE_inlineExprStatement = 20, RULE_blockStatement = 21, RULE_returnStatement = 22, 
		RULE_statementMemberDeclaration = 23, RULE_statement = 24, RULE_ifThenElseStatement = 25, 
		RULE_thenStatement = 26, RULE_elseStatement = 27, RULE_whileStatement = 28, 
		RULE_forStatement = 29, RULE_forEachStatement = 30, RULE_exprStatement = 31, 
		RULE_statementExpr = 32, RULE_expr = 33, RULE_leafExpr = 34, RULE_groupExpr = 35, 
		RULE_conditionOp = 36, RULE_literalExpr = 37, RULE_refExpr = 38, RULE_assignmentExpr = 39, 
		RULE_assignmentLhs = 40, RULE_assignmentOp = 41, RULE_callArgs = 42, RULE_callArg = 43, 
		RULE_argsDecl = 44, RULE_argDecl = 45, RULE_typeRef = 46, RULE_namespaceName = 47, 
		RULE_typeName = 48, RULE_namespaceOrTypeName = 49, RULE_typeDeclName = 50, 
		RULE_memberName = 51, RULE_argName = 52, RULE_literal = 53;
	public static readonly string[] ruleNames = {
		"document", "topStatements", "topStatement", "namespaceDeclaration", "namespaceBody", 
		"typeDeclaration", "typeDeclModifier", "typeDeclType", "typeDeclArgs", 
		"typeDeclBody", "typeDeclBodyStatements", "typeDeclBodyStatement", "memberDeclaration", 
		"memberArgsDecl", "memberReturn", "memberDeclBody", "memberModifier", 
		"codeBlock", "codeBlockOrValue", "blockStatements", "inlineExprStatement", 
		"blockStatement", "returnStatement", "statementMemberDeclaration", "statement", 
		"ifThenElseStatement", "thenStatement", "elseStatement", "whileStatement", 
		"forStatement", "forEachStatement", "exprStatement", "statementExpr", 
		"expr", "leafExpr", "groupExpr", "conditionOp", "literalExpr", "refExpr", 
		"assignmentExpr", "assignmentLhs", "assignmentOp", "callArgs", "callArg", 
		"argsDecl", "argDecl", "typeRef", "namespaceName", "typeName", "namespaceOrTypeName", 
		"typeDeclName", "memberName", "argName", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!='", "'%='", "'&&'", "'&='", "'('", "')'", "'*='", "','", "'.'", 
		"'/='", "':'", "';'", "'?'", "'^='", "'{'", "'||'", "'|='", "'}'", "'+='", 
		"'<'", "'<<='", "'<='", "'='", "'-='", "'=='", "'=>'", "'>'", "'>='", 
		"'>>='", "'>>>='", "'class'", "'else'", "'enum'", "'for'", "'foreach'", 
		"'if'", "'in'", "'interface'", "'internal'", "'namespace'", "'new'", "'null'", 
		"'override'", "'private'", "'protected'", "'public'", "'readonly'", "'return'", 
		"'struct'", "'then'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "S_EXCL_EQ", "S_PCNT_EQ", "S_AND_AND", "S_AND_EQ", "S_LP", "S_RP", 
		"S_ASTE_EQ", "S_COMMA", "S_DOT", "S_SLASH_EQ", "S_COLON", "S_SEMI", "S_QM", 
		"S_ACCENT_CIRC_EQ", "S_LW", "S_OR_OR", "S_OR_EQ", "S_RW", "S_PLUS_EQ", 
		"S_LT", "S_LT_LT_EQ", "S_LT_EQ", "S_EQ", "S_HYPHEN_MINUS_EQ", "S_EQ_EQ", 
		"S_EQ_GT", "S_GT", "S_GT_EQ", "S_GT_GT_EQ", "S_GT_GT_GT_EQ", "CLASS", 
		"ELSE", "ENUM", "FOR", "FOREACH", "IF", "IN", "INTERFACE", "INTERNAL", 
		"NAMESPACE", "NEW", "NullLiteral", "OVERRIDE", "PRIVATE", "PROTECTED", 
		"PUBLIC", "READONLY", "RETURN", "STRUCT", "THEN", "WHILE", "IntegerLiteral", 
		"FloatingPointLiteral", "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
		"Identifier", "WS", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "ERRCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RSHARPParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RSHARPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RSHARPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RSHARPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RSHARPParser.Eof, 0); }
		public TopStatementsContext topStatements() {
			return GetRuleContext<TopStatementsContext>(0);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STRUCT))) != 0)) {
				{
				State = 108; topStatements();
				}
			}

			State = 111; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementsContext : ParserRuleContext {
		public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public ITerminalNode[] S_SEMI() { return GetTokens(RSHARPParser.S_SEMI); }
		public ITerminalNode S_SEMI(int i) {
			return GetToken(RSHARPParser.S_SEMI, i);
		}
		public TopStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTopStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTopStatements(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementsContext topStatements() {
		TopStatementsContext _localctx = new TopStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 113; topStatement();
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==S_SEMI) {
					{
					{
					State = 114; Match(S_SEMI);
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STRUCT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTopStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topStatement);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; namespaceDeclaration();
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
			case INTERNAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case STRUCT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; typeDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(RSHARPParser.NAMESPACE, 0); }
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(NAMESPACE);
			State = 129; namespaceName(0);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==S_LW) {
				{
				State = 130; namespaceBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode S_LW() { return GetToken(RSHARPParser.S_LW, 0); }
		public ITerminalNode S_RW() { return GetToken(RSHARPParser.S_RW, 0); }
		public TopStatementsContext topStatements() {
			return GetRuleContext<TopStatementsContext>(0);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(S_LW);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STRUCT))) != 0)) {
				{
				State = 134; topStatements();
				}
			}

			State = 137; Match(S_RW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public TypeDeclTypeContext typeDeclType() {
			return GetRuleContext<TypeDeclTypeContext>(0);
		}
		public TypeDeclNameContext typeDeclName() {
			return GetRuleContext<TypeDeclNameContext>(0);
		}
		public TypeDeclModifierContext[] typeDeclModifier() {
			return GetRuleContexts<TypeDeclModifierContext>();
		}
		public TypeDeclModifierContext typeDeclModifier(int i) {
			return GetRuleContext<TypeDeclModifierContext>(i);
		}
		public TypeDeclArgsContext typeDeclArgs() {
			return GetRuleContext<TypeDeclArgsContext>(0);
		}
		public TypeDeclBodyContext typeDeclBody() {
			return GetRuleContext<TypeDeclBodyContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTERNAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) {
				{
				{
				State = 139; typeDeclModifier();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 145; typeDeclType();
			State = 146; typeDeclName();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==S_LP) {
				{
				State = 147; typeDeclArgs();
				}
			}

			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==S_LW) {
				{
				State = 150; typeDeclBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(RSHARPParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(RSHARPParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(RSHARPParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(RSHARPParser.INTERNAL, 0); }
		public TypeDeclModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclModifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclModifierContext typeDeclModifier() {
		TypeDeclModifierContext _localctx = new TypeDeclModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeDeclModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTERNAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclTypeContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(RSHARPParser.CLASS, 0); }
		public ITerminalNode INTERFACE() { return GetToken(RSHARPParser.INTERFACE, 0); }
		public ITerminalNode ENUM() { return GetToken(RSHARPParser.ENUM, 0); }
		public ITerminalNode STRUCT() { return GetToken(RSHARPParser.STRUCT, 0); }
		public ITerminalNode READONLY() { return GetToken(RSHARPParser.READONLY, 0); }
		public TypeDeclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclType(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclTypeContext typeDeclType() {
		TypeDeclTypeContext _localctx = new TypeDeclTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeDeclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << INTERFACE) | (1L << READONLY) | (1L << STRUCT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclArgsContext : ParserRuleContext {
		public ArgsDeclContext argsDecl() {
			return GetRuleContext<ArgsDeclContext>(0);
		}
		public TypeDeclArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclArgs(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclArgsContext typeDeclArgs() {
		TypeDeclArgsContext _localctx = new TypeDeclArgsContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeDeclArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; argsDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclBodyContext : ParserRuleContext {
		public ITerminalNode S_LW() { return GetToken(RSHARPParser.S_LW, 0); }
		public ITerminalNode S_RW() { return GetToken(RSHARPParser.S_RW, 0); }
		public TypeDeclBodyStatementsContext typeDeclBodyStatements() {
			return GetRuleContext<TypeDeclBodyStatementsContext>(0);
		}
		public TypeDeclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclBodyContext typeDeclBody() {
		TypeDeclBodyContext _localctx = new TypeDeclBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeDeclBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(S_LW);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STRUCT) | (1L << Identifier))) != 0)) {
				{
				State = 160; typeDeclBodyStatements();
				}
			}

			State = 163; Match(S_RW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclBodyStatementsContext : ParserRuleContext {
		public TypeDeclBodyStatementContext[] typeDeclBodyStatement() {
			return GetRuleContexts<TypeDeclBodyStatementContext>();
		}
		public TypeDeclBodyStatementContext typeDeclBodyStatement(int i) {
			return GetRuleContext<TypeDeclBodyStatementContext>(i);
		}
		public TypeDeclBodyStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclBodyStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclBodyStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclBodyStatements(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclBodyStatementsContext typeDeclBodyStatements() {
		TypeDeclBodyStatementsContext _localctx = new TypeDeclBodyStatementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeDeclBodyStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 165; typeDeclBodyStatement();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STRUCT) | (1L << Identifier))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclBodyStatementContext : ParserRuleContext {
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public TypeDeclBodyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclBodyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclBodyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclBodyStatement(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclBodyStatementContext typeDeclBodyStatement() {
		TypeDeclBodyStatementContext _localctx = new TypeDeclBodyStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeDeclBodyStatement);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; typeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; memberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public MemberModifierContext[] memberModifier() {
			return GetRuleContexts<MemberModifierContext>();
		}
		public MemberModifierContext memberModifier(int i) {
			return GetRuleContext<MemberModifierContext>(i);
		}
		public MemberArgsDeclContext memberArgsDecl() {
			return GetRuleContext<MemberArgsDeclContext>(0);
		}
		public MemberReturnContext memberReturn() {
			return GetRuleContext<MemberReturnContext>(0);
		}
		public MemberDeclBodyContext memberDeclBody() {
			return GetRuleContext<MemberDeclBodyContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_memberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTERNAL) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) {
				{
				{
				State = 174; memberModifier();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180; memberName();
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==S_LP) {
				{
				State = 181; memberArgsDecl();
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 184; memberReturn();
				}
				break;
			}
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_LW) | (1L << S_EQ) | (1L << S_EQ_GT))) != 0)) {
				{
				State = 187; memberDeclBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberArgsDeclContext : ParserRuleContext {
		public ArgsDeclContext[] argsDecl() {
			return GetRuleContexts<ArgsDeclContext>();
		}
		public ArgsDeclContext argsDecl(int i) {
			return GetRuleContext<ArgsDeclContext>(i);
		}
		public MemberArgsDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberArgsDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterMemberArgsDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitMemberArgsDecl(this);
		}
	}

	[RuleVersion(0)]
	public MemberArgsDeclContext memberArgsDecl() {
		MemberArgsDeclContext _localctx = new MemberArgsDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_memberArgsDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 190; argsDecl();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==S_LP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberReturnContext : ParserRuleContext {
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public MemberReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterMemberReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitMemberReturn(this);
		}
	}

	[RuleVersion(0)]
	public MemberReturnContext memberReturn() {
		MemberReturnContext _localctx = new MemberReturnContext(Context, State);
		EnterRule(_localctx, 28, RULE_memberReturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; typeRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclBodyContext : ParserRuleContext {
		public ITerminalNode S_LW() { return GetToken(RSHARPParser.S_LW, 0); }
		public ITerminalNode S_RW() { return GetToken(RSHARPParser.S_RW, 0); }
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ITerminalNode S_EQ_GT() { return GetToken(RSHARPParser.S_EQ_GT, 0); }
		public InlineExprStatementContext inlineExprStatement() {
			return GetRuleContext<InlineExprStatementContext>(0);
		}
		public ITerminalNode S_EQ() { return GetToken(RSHARPParser.S_EQ, 0); }
		public MemberDeclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclBody(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclBodyContext memberDeclBody() {
		MemberDeclBodyContext _localctx = new MemberDeclBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberDeclBody);
		int _la;
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case S_LW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; Match(S_LW);
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_LP) | (1L << FOR) | (1L << FOREACH) | (1L << IF) | (1L << NullLiteral) | (1L << RETURN) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
					{
					State = 198; blockStatements();
					}
				}

				State = 201; Match(S_RW);
				}
				break;
			case S_EQ_GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; Match(S_EQ_GT);
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURN) {
					{
					State = 203; inlineExprStatement();
					}
				}

				}
				break;
			case S_EQ:
				EnterOuterAlt(_localctx, 3);
				{
				State = 206; Match(S_EQ);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURN) {
					{
					State = 207; inlineExprStatement();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifierContext : ParserRuleContext {
		public ITerminalNode OVERRIDE() { return GetToken(RSHARPParser.OVERRIDE, 0); }
		public ITerminalNode NEW() { return GetToken(RSHARPParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(RSHARPParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(RSHARPParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(RSHARPParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(RSHARPParser.INTERNAL, 0); }
		public MemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterMemberModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitMemberModifier(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifierContext memberModifier() {
		MemberModifierContext _localctx = new MemberModifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_memberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTERNAL) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public ITerminalNode S_LW() { return GetToken(RSHARPParser.S_LW, 0); }
		public ITerminalNode S_RW() { return GetToken(RSHARPParser.S_RW, 0); }
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ITerminalNode S_EQ_GT() { return GetToken(RSHARPParser.S_EQ_GT, 0); }
		public InlineExprStatementContext inlineExprStatement() {
			return GetRuleContext<InlineExprStatementContext>(0);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterCodeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitCodeBlock(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_codeBlock);
		int _la;
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case S_LW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214; Match(S_LW);
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_LP) | (1L << FOR) | (1L << FOREACH) | (1L << IF) | (1L << NullLiteral) | (1L << RETURN) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
					{
					State = 215; blockStatements();
					}
				}

				State = 218; Match(S_RW);
				}
				break;
			case S_EQ_GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; Match(S_EQ_GT);
				State = 221;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 220; inlineExprStatement();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockOrValueContext : ParserRuleContext {
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public RefExprContext refExpr() {
			return GetRuleContext<RefExprContext>(0);
		}
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public CodeBlockOrValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlockOrValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterCodeBlockOrValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitCodeBlockOrValue(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockOrValueContext codeBlockOrValue() {
		CodeBlockOrValueContext _localctx = new CodeBlockOrValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_codeBlockOrValue);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case S_LW:
			case S_EQ_GT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225; codeBlock();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; refExpr(0);
				}
				break;
			case NullLiteral:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227; literalExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(Context, State);
		EnterRule(_localctx, 38, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 230; blockStatement();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_LP) | (1L << FOR) | (1L << FOREACH) | (1L << IF) | (1L << NullLiteral) | (1L << RETURN) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineExprStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(RSHARPParser.RETURN, 0); }
		public InlineExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineExprStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterInlineExprStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitInlineExprStatement(this);
		}
	}

	[RuleVersion(0)]
	public InlineExprStatementContext inlineExprStatement() {
		InlineExprStatementContext _localctx = new InlineExprStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_inlineExprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_blockStatement);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; returnStatement();
				}
				break;
			case S_LP:
			case FOR:
			case FOREACH:
			case IF:
			case NullLiteral:
			case WHILE:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(RSHARPParser.RETURN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(RETURN);
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 242; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementMemberDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public StatementMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterStatementMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitStatementMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StatementMemberDeclarationContext statementMemberDeclaration() {
		StatementMemberDeclarationContext _localctx = new StatementMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_statementMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; memberDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_statement);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; ifThenElseStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; whileStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249; forStatement();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 250; forEachStatement();
				}
				break;
			case S_LP:
			case NullLiteral:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 5);
				{
				State = 251; exprStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(RSHARPParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenStatementContext thenStatement() {
			return GetRuleContext<ThenStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifThenElseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(IF);
			State = 255; expr(0);
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 256; thenStatement();
				}
			}

			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 259; elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatementContext : ParserRuleContext {
		public ITerminalNode THEN() { return GetToken(RSHARPParser.THEN, 0); }
		public CodeBlockOrValueContext codeBlockOrValue() {
			return GetRuleContext<CodeBlockOrValueContext>(0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitThenStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatementContext thenStatement() {
		ThenStatementContext _localctx = new ThenStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_thenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(THEN);
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 263; codeBlockOrValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(RSHARPParser.ELSE, 0); }
		public CodeBlockOrValueContext codeBlockOrValue() {
			return GetRuleContext<CodeBlockOrValueContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(ELSE);
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 267; codeBlockOrValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(RSHARPParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeBlockOrValueContext codeBlockOrValue() {
			return GetRuleContext<CodeBlockOrValueContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(WHILE);
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 271; expr(0);
				}
				break;
			}
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 274; codeBlockOrValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(RSHARPParser.FOR, 0); }
		public ITerminalNode S_LP() { return GetToken(RSHARPParser.S_LP, 0); }
		public ITerminalNode S_RP() { return GetToken(RSHARPParser.S_RP, 0); }
		public CodeBlockOrValueContext codeBlockOrValue() {
			return GetRuleContext<CodeBlockOrValueContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(FOR);
			State = 278; Match(S_LP);
			State = 279; Match(S_RP);
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 280; codeBlockOrValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(RSHARPParser.FOREACH, 0); }
		public ITerminalNode IN() { return GetToken(RSHARPParser.IN, 0); }
		public RefExprContext refExpr() {
			return GetRuleContext<RefExprContext>(0);
		}
		public CodeBlockOrValueContext codeBlockOrValue() {
			return GetRuleContext<CodeBlockOrValueContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(FOREACH);
			State = 284; Match(IN);
			State = 285; refExpr(0);
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 286; codeBlockOrValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStatementContext : ParserRuleContext {
		public StatementExprContext statementExpr() {
			return GetRuleContext<StatementExprContext>(0);
		}
		public ExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterExprStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitExprStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExprStatementContext exprStatement() {
		ExprStatementContext _localctx = new ExprStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_exprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; statementExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExprContext : ParserRuleContext {
		public AssignmentExprContext assignmentExpr() {
			return GetRuleContext<AssignmentExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterStatementExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitStatementExpr(this);
		}
	}

	[RuleVersion(0)]
	public StatementExprContext statementExpr() {
		StatementExprContext _localctx = new StatementExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_statementExpr);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; assignmentExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public GroupExprContext groupExpr() {
			return GetRuleContext<GroupExprContext>(0);
		}
		public LeafExprContext leafExpr() {
			return GetRuleContext<LeafExprContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode S_QM() { return GetToken(RSHARPParser.S_QM, 0); }
		public ITerminalNode S_COLON() { return GetToken(RSHARPParser.S_COLON, 0); }
		public ConditionOpContext conditionOp() {
			return GetRuleContext<ConditionOpContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case S_LP:
				{
				State = 296; groupExpr();
				}
				break;
			case NullLiteral:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case Identifier:
				{
				State = 297; leafExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 312;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 310;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 300;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 301; Match(S_QM);
						State = 302; expr(0);
						State = 303; Match(S_COLON);
						State = 304; expr(3);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 306;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 307; conditionOp();
						State = 308; expr(2);
						}
						break;
					}
					} 
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LeafExprContext : ParserRuleContext {
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public RefExprContext refExpr() {
			return GetRuleContext<RefExprContext>(0);
		}
		public LeafExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leafExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterLeafExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitLeafExpr(this);
		}
	}

	[RuleVersion(0)]
	public LeafExprContext leafExpr() {
		LeafExprContext _localctx = new LeafExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_leafExpr);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; literalExpr();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; refExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupExprContext : ParserRuleContext {
		public ITerminalNode S_LP() { return GetToken(RSHARPParser.S_LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode S_RP() { return GetToken(RSHARPParser.S_RP, 0); }
		public GroupExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterGroupExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitGroupExpr(this);
		}
	}

	[RuleVersion(0)]
	public GroupExprContext groupExpr() {
		GroupExprContext _localctx = new GroupExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_groupExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(S_LP);
			State = 320; expr(0);
			State = 321; Match(S_RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionOpContext : ParserRuleContext {
		public ITerminalNode S_OR_OR() { return GetToken(RSHARPParser.S_OR_OR, 0); }
		public ITerminalNode S_AND_AND() { return GetToken(RSHARPParser.S_AND_AND, 0); }
		public ITerminalNode S_EQ_EQ() { return GetToken(RSHARPParser.S_EQ_EQ, 0); }
		public ITerminalNode S_EXCL_EQ() { return GetToken(RSHARPParser.S_EXCL_EQ, 0); }
		public ITerminalNode S_LT() { return GetToken(RSHARPParser.S_LT, 0); }
		public ITerminalNode S_GT() { return GetToken(RSHARPParser.S_GT, 0); }
		public ITerminalNode S_LT_EQ() { return GetToken(RSHARPParser.S_LT_EQ, 0); }
		public ITerminalNode S_GT_EQ() { return GetToken(RSHARPParser.S_GT_EQ, 0); }
		public ConditionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterConditionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitConditionOp(this);
		}
	}

	[RuleVersion(0)]
	public ConditionOpContext conditionOp() {
		ConditionOpContext _localctx = new ConditionOpContext(Context, State);
		EnterRule(_localctx, 72, RULE_conditionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_EXCL_EQ) | (1L << S_AND_AND) | (1L << S_OR_OR) | (1L << S_LT) | (1L << S_LT_EQ) | (1L << S_EQ_EQ) | (1L << S_GT) | (1L << S_GT_EQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_literalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefExprContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RSHARPParser.Identifier, 0); }
		public CallArgsContext callArgs() {
			return GetRuleContext<CallArgsContext>(0);
		}
		public RefExprContext refExpr() {
			return GetRuleContext<RefExprContext>(0);
		}
		public ITerminalNode S_DOT() { return GetToken(RSHARPParser.S_DOT, 0); }
		public RefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterRefExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitRefExpr(this);
		}
	}

	[RuleVersion(0)]
	public RefExprContext refExpr() {
		return refExpr(0);
	}

	private RefExprContext refExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RefExprContext _localctx = new RefExprContext(Context, _parentState);
		RefExprContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_refExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 328; Match(Identifier);
			State = 329; callArgs();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 336;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RefExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_refExpr);
					State = 331;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 332; Match(S_DOT);
					State = 333; Match(Identifier);
					}
					} 
				}
				State = 338;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentExprContext : ParserRuleContext {
		public AssignmentLhsContext assignmentLhs() {
			return GetRuleContext<AssignmentLhsContext>(0);
		}
		public AssignmentOpContext assignmentOp() {
			return GetRuleContext<AssignmentOpContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpr(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExprContext assignmentExpr() {
		AssignmentExprContext _localctx = new AssignmentExprContext(Context, State);
		EnterRule(_localctx, 78, RULE_assignmentExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; assignmentLhs();
			State = 340; assignmentOp();
			State = 341; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentLhsContext : ParserRuleContext {
		public RefExprContext refExpr() {
			return GetRuleContext<RefExprContext>(0);
		}
		public AssignmentLhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentLhs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentLhs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentLhs(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentLhsContext assignmentLhs() {
		AssignmentLhsContext _localctx = new AssignmentLhsContext(Context, State);
		EnterRule(_localctx, 80, RULE_assignmentLhs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; refExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOpContext : ParserRuleContext {
		public ITerminalNode S_EQ() { return GetToken(RSHARPParser.S_EQ, 0); }
		public ITerminalNode S_ASTE_EQ() { return GetToken(RSHARPParser.S_ASTE_EQ, 0); }
		public ITerminalNode S_SLASH_EQ() { return GetToken(RSHARPParser.S_SLASH_EQ, 0); }
		public ITerminalNode S_PCNT_EQ() { return GetToken(RSHARPParser.S_PCNT_EQ, 0); }
		public ITerminalNode S_PLUS_EQ() { return GetToken(RSHARPParser.S_PLUS_EQ, 0); }
		public ITerminalNode S_HYPHEN_MINUS_EQ() { return GetToken(RSHARPParser.S_HYPHEN_MINUS_EQ, 0); }
		public ITerminalNode S_LT_LT_EQ() { return GetToken(RSHARPParser.S_LT_LT_EQ, 0); }
		public ITerminalNode S_GT_GT_EQ() { return GetToken(RSHARPParser.S_GT_GT_EQ, 0); }
		public ITerminalNode S_GT_GT_GT_EQ() { return GetToken(RSHARPParser.S_GT_GT_GT_EQ, 0); }
		public ITerminalNode S_AND_EQ() { return GetToken(RSHARPParser.S_AND_EQ, 0); }
		public ITerminalNode S_ACCENT_CIRC_EQ() { return GetToken(RSHARPParser.S_ACCENT_CIRC_EQ, 0); }
		public ITerminalNode S_OR_EQ() { return GetToken(RSHARPParser.S_OR_EQ, 0); }
		public AssignmentOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOp(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOpContext assignmentOp() {
		AssignmentOpContext _localctx = new AssignmentOpContext(Context, State);
		EnterRule(_localctx, 82, RULE_assignmentOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_PCNT_EQ) | (1L << S_AND_EQ) | (1L << S_ASTE_EQ) | (1L << S_SLASH_EQ) | (1L << S_ACCENT_CIRC_EQ) | (1L << S_OR_EQ) | (1L << S_PLUS_EQ) | (1L << S_LT_LT_EQ) | (1L << S_EQ) | (1L << S_HYPHEN_MINUS_EQ) | (1L << S_GT_GT_EQ) | (1L << S_GT_GT_GT_EQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgsContext : ParserRuleContext {
		public ITerminalNode S_LP() { return GetToken(RSHARPParser.S_LP, 0); }
		public ITerminalNode S_RP() { return GetToken(RSHARPParser.S_RP, 0); }
		public CallArgContext[] callArg() {
			return GetRuleContexts<CallArgContext>();
		}
		public CallArgContext callArg(int i) {
			return GetRuleContext<CallArgContext>(i);
		}
		public ITerminalNode[] S_COMMA() { return GetTokens(RSHARPParser.S_COMMA); }
		public ITerminalNode S_COMMA(int i) {
			return GetToken(RSHARPParser.S_COMMA, i);
		}
		public CallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterCallArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitCallArgs(this);
		}
	}

	[RuleVersion(0)]
	public CallArgsContext callArgs() {
		CallArgsContext _localctx = new CallArgsContext(Context, State);
		EnterRule(_localctx, 84, RULE_callArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(S_LP);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_LP) | (1L << NullLiteral) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
				{
				State = 348; callArg();
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==S_COMMA) {
					{
					{
					State = 349; Match(S_COMMA);
					State = 350; callArg();
					}
					}
					State = 355;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 358; Match(S_RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterCallArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitCallArg(this);
		}
	}

	[RuleVersion(0)]
	public CallArgContext callArg() {
		CallArgContext _localctx = new CallArgContext(Context, State);
		EnterRule(_localctx, 86, RULE_callArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsDeclContext : ParserRuleContext {
		public ITerminalNode S_LP() { return GetToken(RSHARPParser.S_LP, 0); }
		public ITerminalNode S_RP() { return GetToken(RSHARPParser.S_RP, 0); }
		public ArgDeclContext[] argDecl() {
			return GetRuleContexts<ArgDeclContext>();
		}
		public ArgDeclContext argDecl(int i) {
			return GetRuleContext<ArgDeclContext>(i);
		}
		public ITerminalNode[] S_COMMA() { return GetTokens(RSHARPParser.S_COMMA); }
		public ITerminalNode S_COMMA(int i) {
			return GetToken(RSHARPParser.S_COMMA, i);
		}
		public ArgsDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterArgsDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitArgsDecl(this);
		}
	}

	[RuleVersion(0)]
	public ArgsDeclContext argsDecl() {
		ArgsDeclContext _localctx = new ArgsDeclContext(Context, State);
		EnterRule(_localctx, 88, RULE_argsDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(S_LP);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 363; argDecl();
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==S_COMMA) {
					{
					{
					State = 364; Match(S_COMMA);
					State = 365; argDecl();
					}
					}
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 373; Match(S_RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDeclContext : ParserRuleContext {
		public ArgNameContext argName() {
			return GetRuleContext<ArgNameContext>(0);
		}
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ArgDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterArgDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitArgDecl(this);
		}
	}

	[RuleVersion(0)]
	public ArgDeclContext argDecl() {
		ArgDeclContext _localctx = new ArgDeclContext(Context, State);
		EnterRule(_localctx, 90, RULE_argDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; argName();
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 376; typeRef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeRef(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefContext typeRef() {
		TypeRefContext _localctx = new TypeRefContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RSHARPParser.Identifier, 0); }
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public ITerminalNode S_DOT() { return GetToken(RSHARPParser.S_DOT, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		return namespaceName(0);
	}

	private NamespaceNameContext namespaceName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, _parentState);
		NamespaceNameContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_namespaceName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 382; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 389;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NamespaceNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_namespaceName);
					State = 384;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 385; Match(S_DOT);
					State = 386; Match(Identifier);
					}
					} 
				}
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RSHARPParser.Identifier, 0); }
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode S_DOT() { return GetToken(RSHARPParser.S_DOT, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 96, RULE_typeName);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393; namespaceOrTypeName(0);
				State = 394; Match(S_DOT);
				State = 395; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceOrTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RSHARPParser.Identifier, 0); }
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode S_DOT() { return GetToken(RSHARPParser.S_DOT, 0); }
		public NamespaceOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterNamespaceOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitNamespaceOrTypeName(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceOrTypeNameContext namespaceOrTypeName() {
		return namespaceOrTypeName(0);
	}

	private NamespaceOrTypeNameContext namespaceOrTypeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NamespaceOrTypeNameContext _localctx = new NamespaceOrTypeNameContext(Context, _parentState);
		NamespaceOrTypeNameContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_namespaceOrTypeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 400; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 407;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NamespaceOrTypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_namespaceOrTypeName);
					State = 402;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 403; Match(S_DOT);
					State = 404; Match(Identifier);
					}
					} 
				}
				State = 409;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeDeclNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RSHARPParser.Identifier, 0); }
		public TypeDeclNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclName(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclNameContext typeDeclName() {
		TypeDeclNameContext _localctx = new TypeDeclNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeDeclName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RSHARPParser.Identifier, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 102, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RSHARPParser.Identifier, 0); }
		public ArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterArgName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitArgName(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameContext argName() {
		ArgNameContext _localctx = new ArgNameContext(Context, State);
		EnterRule(_localctx, 104, RULE_argName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(RSHARPParser.IntegerLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(RSHARPParser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(RSHARPParser.BooleanLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(RSHARPParser.CharacterLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(RSHARPParser.StringLiteral, 0); }
		public ITerminalNode NullLiteral() { return GetToken(RSHARPParser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSHARPParserListener typedListener = listener as IRSHARPParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NullLiteral) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return expr_sempred((ExprContext)_localctx, predIndex);
		case 38: return refExpr_sempred((RefExprContext)_localctx, predIndex);
		case 47: return namespaceName_sempred((NamespaceNameContext)_localctx, predIndex);
		case 49: return namespaceOrTypeName_sempred((NamespaceOrTypeNameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool refExpr_sempred(RefExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool namespaceName_sempred(NamespaceNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool namespaceOrTypeName_sempred(NamespaceOrTypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x1A5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x3', '\x2', '\x5', '\x2', 'p', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'v', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', 'y', '\v', '\x3', '\x6', '\x3', '{', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '|', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x81', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x86', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x8A', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\a', 
		'\a', '\x8F', '\n', '\a', '\f', '\a', '\xE', '\a', '\x92', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x97', '\n', '\a', 
		'\x3', '\a', '\x5', '\a', '\x9A', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xA4', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x6', '\f', '\xA9', '\n', '\f', '\r', '\f', '\xE', '\f', '\xAA', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAF', '\n', '\r', '\x3', '\xE', 
		'\a', '\xE', '\xB2', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xB5', '\v', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB9', '\n', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xBC', '\n', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xBF', '\n', '\xE', '\x3', '\xF', '\x6', '\xF', '\xC2', '\n', 
		'\xF', '\r', '\xF', '\xE', '\xF', '\xC3', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xCA', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xCF', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD3', '\n', '\x11', '\x5', 
		'\x11', '\xD5', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xDB', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xE0', '\n', '\x13', '\x5', '\x13', 
		'\xE2', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xE7', '\n', '\x14', '\x3', '\x15', '\x6', '\x15', '\xEA', '\n', 
		'\x15', '\r', '\x15', '\xE', '\x15', '\xEB', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xF2', '\n', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\xF6', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\xFF', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x104', '\n', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x107', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x10B', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x10F', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x113', 
		'\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x116', '\n', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x11C', 
		'\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x122', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x128', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x5', '#', '\x12D', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\a', '#', '\x139', '\n', '#', '\f', '#', '\xE', '#', '\x13C', '\v', 
		'#', '\x3', '$', '\x3', '$', '\x5', '$', '\x140', '\n', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\a', '(', '\x151', '\n', '(', '\f', '(', '\xE', 
		'(', '\x154', '\v', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\a', ',', '\x162', '\n', ',', '\f', ',', '\xE', 
		',', '\x165', '\v', ',', '\x5', ',', '\x167', '\n', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\a', '.', '\x171', '\n', '.', '\f', '.', '\xE', '.', '\x174', '\v', 
		'.', '\x5', '.', '\x176', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '/', 
		'\x3', '/', '\x5', '/', '\x17C', '\n', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\a', '\x31', '\x186', '\n', '\x31', '\f', '\x31', '\xE', 
		'\x31', '\x189', '\v', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x190', '\n', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\a', '\x33', '\x198', '\n', '\x33', '\f', '\x33', '\xE', '\x33', 
		'\x19B', '\v', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x2', '\x6', '\x44', 'N', '`', '\x64', '\x38', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', '\x2', '\b', '\x4', '\x2', ')', ')', '.', 
		'\x30', '\a', '\x2', '!', '!', '#', '#', '(', '(', '\x31', '\x31', '\x33', 
		'\x33', '\x5', '\x2', ')', ')', '+', '+', '-', '\x30', '\t', '\x2', '\x3', 
		'\x3', '\x5', '\x5', '\x12', '\x12', '\x16', '\x16', '\x18', '\x18', '\x1B', 
		'\x1B', '\x1D', '\x1E', '\f', '\x2', '\x4', '\x4', '\x6', '\x6', '\t', 
		'\t', '\f', '\f', '\x10', '\x10', '\x13', '\x13', '\x15', '\x15', '\x17', 
		'\x17', '\x19', '\x1A', '\x1F', ' ', '\x4', '\x2', ',', ',', '\x36', ':', 
		'\x2', '\x1A6', '\x2', 'o', '\x3', '\x2', '\x2', '\x2', '\x4', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x80', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\n', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x90', '\x3', '\x2', '\x2', '\x2', '\xE', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xD4', '\x3', '\x2', '\x2', '\x2', '\"', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xE1', '\x3', '\x2', '\x2', '\x2', '&', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xE9', '\x3', '\x2', '\x2', '\x2', '*', '\xED', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xF1', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x34', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x108', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', ':', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x117', '\x3', '\x2', '\x2', '\x2', '>', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x123', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x44', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x13F', '\x3', '\x2', '\x2', '\x2', 'H', '\x141', '\x3', 
		'\x2', '\x2', '\x2', 'J', '\x145', '\x3', '\x2', '\x2', '\x2', 'L', '\x147', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x155', '\x3', '\x2', '\x2', '\x2', 'R', '\x159', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x15B', '\x3', '\x2', '\x2', '\x2', 'V', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x16C', '\x3', '\x2', '\x2', '\x2', '\\', '\x179', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x17D', '\x3', '\x2', '\x2', '\x2', '`', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x191', '\x3', '\x2', '\x2', '\x2', '\x66', '\x19C', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x19E', '\x3', '\x2', '\x2', '\x2', 'j', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'n', 'p', '\x5', '\x4', '\x3', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\a', '\x2', '\x2', '\x3', 'r', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 's', 'w', '\x5', '\x6', '\x4', '\x2', 't', 'v', '\a', '\xE', '\x2', 
		'\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'z', 's', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x5', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x5', '\b', 
		'\x5', '\x2', '\x7F', '\x81', '\x5', '\f', '\a', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '*', '\x2', '\x2', 
		'\x83', '\x85', '\x5', '`', '\x31', '\x2', '\x84', '\x86', '\x5', '\n', 
		'\x6', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x89', '\a', '\x11', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x4', 
		'\x3', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\a', '\x14', '\x2', '\x2', '\x8C', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8F', '\x5', '\xE', '\b', '\x2', '\x8E', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x93', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x5', '\x10', '\t', '\x2', 
		'\x94', '\x96', '\x5', '\x66', '\x34', '\x2', '\x95', '\x97', '\x5', '\x12', 
		'\n', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x9A', '\x5', '\x14', '\v', '\x2', '\x99', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\t', '\x2', '\x2', '\x2', 
		'\x9C', '\xF', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\t', '\x3', 
		'\x2', '\x2', '\x9E', '\x11', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', 'Z', '.', '\x2', '\xA0', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA3', '\a', '\x11', '\x2', '\x2', '\xA2', '\xA4', '\x5', '\x16', '\f', 
		'\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\x14', '\x2', '\x2', '\xA6', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA9', '\x5', '\x18', '\r', '\x2', '\xA8', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x5', 
		'\f', '\a', '\x2', '\xAD', '\xAF', '\x5', '\x1A', '\xE', '\x2', '\xAE', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x5', 
		'\"', '\x12', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\x5', 'h', '\x35', '\x2', '\xB7', '\xB9', '\x5', '\x1C', '\xF', 
		'\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBC', '\x5', '\x1E', '\x10', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBF', '\x5', ' ', '\x11', '\x2', '\xBE', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x5', 
		'Z', '.', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC6', '\x5', '^', '\x30', '\x2', '\xC6', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\a', '\x11', '\x2', '\x2', 
		'\xC8', '\xCA', '\x5', '(', '\x15', '\x2', '\xC9', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xD5', '\a', '\x14', '\x2', '\x2', 
		'\xCC', '\xCE', '\a', '\x1C', '\x2', '\x2', '\xCD', '\xCF', '\x5', '*', 
		'\x16', '\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD2', '\a', '\x19', '\x2', '\x2', '\xD1', '\xD3', '\x5', '*', 
		'\x16', '\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD5', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\t', '\x4', '\x2', '\x2', 
		'\xD7', '#', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDA', '\a', '\x11', 
		'\x2', '\x2', '\xD9', '\xDB', '\x5', '(', '\x15', '\x2', '\xDA', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE2', '\a', '\x14', 
		'\x2', '\x2', '\xDD', '\xDF', '\a', '\x1C', '\x2', '\x2', '\xDE', '\xE0', 
		'\x5', '*', '\x16', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '%', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE7', '\x5', '$', '\x13', '\x2', '\xE4', '\xE7', '\x5', 'N', '(', '\x2', 
		'\xE5', '\xE7', '\x5', 'L', '\'', '\x2', '\xE6', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xEA', '\x5', ',', '\x17', '\x2', '\xE9', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', ')', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\x32', 
		'\x2', '\x2', '\xEE', '+', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF2', 
		'\x5', '.', '\x18', '\x2', '\xF0', '\xF2', '\x5', '\x32', '\x1A', '\x2', 
		'\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '-', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', 
		'\a', '\x32', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\x32', '\x1A', '\x2', 
		'\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '/', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\x5', '\x1A', '\xE', '\x2', '\xF8', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFF', '\x5', '\x34', '\x1B', '\x2', '\xFA', '\xFF', '\x5', ':', 
		'\x1E', '\x2', '\xFB', '\xFF', '\x5', '<', '\x1F', '\x2', '\xFC', '\xFF', 
		'\x5', '>', ' ', '\x2', '\xFD', '\xFF', '\x5', '@', '!', '\x2', '\xFE', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\a', '&', '\x2', 
		'\x2', '\x101', '\x103', '\x5', '\x44', '#', '\x2', '\x102', '\x104', 
		'\x5', '\x36', '\x1C', '\x2', '\x103', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x107', '\x5', '\x38', '\x1D', '\x2', '\x106', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x35', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10A', 
		'\a', '\x34', '\x2', '\x2', '\x109', '\x10B', '\x5', '&', '\x14', '\x2', 
		'\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x37', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10E', '\a', '\"', '\x2', '\x2', '\x10D', '\x10F', '\x5', '&', '\x14', 
		'\x2', '\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x112', '\a', '\x35', '\x2', '\x2', '\x111', '\x113', '\x5', 
		'\x44', '#', '\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x116', '\x5', '&', '\x14', '\x2', '\x115', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x116', ';', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', '$', 
		'\x2', '\x2', '\x118', '\x119', '\a', '\a', '\x2', '\x2', '\x119', '\x11B', 
		'\a', '\b', '\x2', '\x2', '\x11A', '\x11C', '\x5', '&', '\x14', '\x2', 
		'\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '=', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11E', '\a', '%', '\x2', '\x2', '\x11E', '\x11F', '\a', '\'', '\x2', 
		'\x2', '\x11F', '\x121', '\x5', 'N', '(', '\x2', '\x120', '\x122', '\x5', 
		'&', '\x14', '\x2', '\x121', '\x120', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x5', '\x42', '\"', '\x2', '\x124', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x5', 'P', ')', '\x2', 
		'\x126', '\x128', '\x5', '\x44', '#', '\x2', '\x127', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\b', '#', '\x1', 
		'\x2', '\x12A', '\x12D', '\x5', 'H', '%', '\x2', '\x12B', '\x12D', '\x5', 
		'\x46', '$', '\x2', '\x12C', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12F', '\f', '\x4', '\x2', '\x2', '\x12F', '\x130', 
		'\a', '\xF', '\x2', '\x2', '\x130', '\x131', '\x5', '\x44', '#', '\x2', 
		'\x131', '\x132', '\a', '\r', '\x2', '\x2', '\x132', '\x133', '\x5', '\x44', 
		'#', '\x5', '\x133', '\x139', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', 
		'\f', '\x3', '\x2', '\x2', '\x135', '\x136', '\x5', 'J', '&', '\x2', '\x136', 
		'\x137', '\x5', '\x44', '#', '\x4', '\x137', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x138', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x45', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x140', '\x5', 'L', '\'', 
		'\x2', '\x13E', '\x140', '\x5', 'N', '(', '\x2', '\x13F', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a', '\a', '\x2', 
		'\x2', '\x142', '\x143', '\x5', '\x44', '#', '\x2', '\x143', '\x144', 
		'\a', '\b', '\x2', '\x2', '\x144', 'I', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\t', '\x5', '\x2', '\x2', '\x146', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\x5', 'l', '\x37', '\x2', '\x148', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14A', '\b', '(', '\x1', '\x2', '\x14A', 
		'\x14B', '\a', ';', '\x2', '\x2', '\x14B', '\x14C', '\x5', 'V', ',', '\x2', 
		'\x14C', '\x152', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\f', 
		'\x3', '\x2', '\x2', '\x14E', '\x14F', '\a', '\v', '\x2', '\x2', '\x14F', 
		'\x151', '\a', ';', '\x2', '\x2', '\x150', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x154', '\x3', '\x2', '\x2', '\x2', '\x152', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x153', 'O', '\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x156', '\x5', 'R', '*', '\x2', '\x156', '\x157', 
		'\x5', 'T', '+', '\x2', '\x157', '\x158', '\x5', '\x44', '#', '\x2', '\x158', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x5', 'N', '(', '\x2', 
		'\x15A', 'S', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\t', '\x6', 
		'\x2', '\x2', '\x15C', 'U', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x166', 
		'\a', '\a', '\x2', '\x2', '\x15E', '\x163', '\x5', 'X', '-', '\x2', '\x15F', 
		'\x160', '\a', '\n', '\x2', '\x2', '\x160', '\x162', '\x5', 'X', '-', 
		'\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\a', '\b', '\x2', '\x2', '\x169', 'W', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16B', '\x5', '\x44', '#', '\x2', '\x16B', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x175', '\a', '\a', '\x2', '\x2', '\x16D', '\x172', '\x5', 
		'\\', '/', '\x2', '\x16E', '\x16F', '\a', '\n', '\x2', '\x2', '\x16F', 
		'\x171', '\x5', '\\', '/', '\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x174', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x176', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x175', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x177', '\x178', '\a', '\b', '\x2', '\x2', '\x178', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x17B', '\x5', 'j', '\x36', '\x2', '\x17A', 
		'\x17C', '\x5', '^', '\x30', '\x2', '\x17B', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17E', '\x5', '\x62', '\x32', '\x2', '\x17E', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\b', '\x31', '\x1', 
		'\x2', '\x180', '\x181', '\a', ';', '\x2', '\x2', '\x181', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x183', '\f', '\x3', '\x2', '\x2', '\x183', 
		'\x184', '\a', '\v', '\x2', '\x2', '\x184', '\x186', '\a', ';', '\x2', 
		'\x2', '\x185', '\x182', '\x3', '\x2', '\x2', '\x2', '\x186', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x190', '\a', ';', '\x2', '\x2', '\x18B', '\x18C', '\x5', '\x64', '\x33', 
		'\x2', '\x18C', '\x18D', '\a', '\v', '\x2', '\x2', '\x18D', '\x18E', '\a', 
		';', '\x2', '\x2', '\x18E', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x18A', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x63', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', 
		'\b', '\x33', '\x1', '\x2', '\x192', '\x193', '\a', ';', '\x2', '\x2', 
		'\x193', '\x199', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\f', 
		'\x3', '\x2', '\x2', '\x195', '\x196', '\a', '\v', '\x2', '\x2', '\x196', 
		'\x198', '\a', ';', '\x2', '\x2', '\x197', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x199', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', '\x65', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19D', '\a', ';', '\x2', '\x2', '\x19D', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', ';', '\x2', '\x2', 
		'\x19F', 'i', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\a', ';', 
		'\x2', '\x2', '\x1A1', 'k', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\t', '\a', '\x2', '\x2', '\x1A3', 'm', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'o', 'w', '|', '\x80', '\x85', '\x89', '\x90', '\x96', '\x99', '\xA3', 
		'\xAA', '\xAE', '\xB3', '\xB8', '\xBB', '\xBE', '\xC3', '\xC9', '\xCE', 
		'\xD2', '\xD4', '\xDA', '\xDF', '\xE1', '\xE6', '\xEB', '\xF1', '\xF5', 
		'\xFE', '\x103', '\x106', '\x10A', '\x10E', '\x112', '\x115', '\x11B', 
		'\x121', '\x127', '\x12C', '\x138', '\x13A', '\x13F', '\x152', '\x163', 
		'\x166', '\x172', '\x175', '\x17B', '\x187', '\x18F', '\x199',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
