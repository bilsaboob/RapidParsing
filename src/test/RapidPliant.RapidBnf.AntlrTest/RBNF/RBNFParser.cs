//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\bilsa\AppData\Roaming\RapidEditor\Extensions\Rapid_Extensions_Antlr\code_gen\201802\18\05\51\21_266\RBNFParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class RBNFParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		S_LP=1, S_RP=2, S_ASTE=3, S_DOT=4, S_SLASH=5, S_SEMI=6, S_QM=7, S_LB=8, 
		S_RB=9, S_OR=10, S_PLUS=11, S_EQ=12, IMPORT=13, IDENTIFIER=14, STRING=15, 
		NUMBER=16, COLOR=17, WS=18, SINGLE_LINE_DOC_COMMENT=19, DELIMITED_DOC_COMMENT=20, 
		SINGLE_LINE_COMMENT=21, DELIMITED_COMMENT=22, ERRCHAR=23;
	public const int
		RULE_document = 0, RULE_topStatements = 1, RULE_topStatement = 2, RULE_importStatement = 3, 
		RULE_ruleDeclaration = 4, RULE_ruleAlts = 5, RULE_expr = 6, RULE_op = 7, 
		RULE_refExpr = 8, RULE_lexExpr = 9, RULE_spellingExpr = 10, RULE_regexExpr = 11, 
		RULE_rangeExpr = 12, RULE_groupExpr = 13, RULE_path = 14, RULE_ident = 15;
	public static readonly string[] ruleNames = {
		"document", "topStatements", "topStatement", "importStatement", "ruleDeclaration", 
		"ruleAlts", "expr", "op", "refExpr", "lexExpr", "spellingExpr", "regexExpr", 
		"rangeExpr", "groupExpr", "path", "ident"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'*'", "'.'", "'/'", "';'", "'?'", "'['", "']'", "'|'", 
		"'+'", "'='", "'import'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "S_LP", "S_RP", "S_ASTE", "S_DOT", "S_SLASH", "S_SEMI", "S_QM", 
		"S_LB", "S_RB", "S_OR", "S_PLUS", "S_EQ", "IMPORT", "IDENTIFIER", "STRING", 
		"NUMBER", "COLOR", "WS", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "ERRCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RBNFParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RBNFParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RBNFParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RBNFParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RBNFParser.Eof, 0); }
		public TopStatementsContext topStatements() {
			return GetRuleContext<TopStatementsContext>(0);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPORT || _la==IDENTIFIER) {
				{
				State = 32; topStatements();
				}
			}

			State = 35; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementsContext : ParserRuleContext {
		public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public ITerminalNode[] S_SEMI() { return GetTokens(RBNFParser.S_SEMI); }
		public ITerminalNode S_SEMI(int i) {
			return GetToken(RBNFParser.S_SEMI, i);
		}
		public TopStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterTopStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitTopStatements(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementsContext topStatements() {
		TopStatementsContext _localctx = new TopStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 37; topStatement();
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==S_SEMI) {
					{
					{
					State = 38; Match(S_SEMI);
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IMPORT || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public RuleDeclarationContext ruleDeclaration() {
			return GetRuleContext<RuleDeclarationContext>(0);
		}
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterTopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitTopStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topStatement);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; importStatement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; ruleDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(RBNFParser.IMPORT, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(IMPORT);
			State = 53; path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclarationContext : ParserRuleContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode S_EQ() { return GetToken(RBNFParser.S_EQ, 0); }
		public ITerminalNode S_SEMI() { return GetToken(RBNFParser.S_SEMI, 0); }
		public RuleAltsContext ruleAlts() {
			return GetRuleContext<RuleAltsContext>(0);
		}
		public RuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterRuleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitRuleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclarationContext ruleDeclaration() {
		RuleDeclarationContext _localctx = new RuleDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_ruleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; ident();
			State = 56; Match(S_EQ);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_LP) | (1L << S_SLASH) | (1L << S_LB) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
				{
				State = 57; ruleAlts();
				}
			}

			State = 60; Match(S_SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] S_OR() { return GetTokens(RBNFParser.S_OR); }
		public ITerminalNode S_OR(int i) {
			return GetToken(RBNFParser.S_OR, i);
		}
		public RuleAltsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAlts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterRuleAlts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitRuleAlts(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltsContext ruleAlts() {
		RuleAltsContext _localctx = new RuleAltsContext(Context, State);
		EnterRule(_localctx, 10, RULE_ruleAlts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; expr(0);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_LP) | (1L << S_SLASH) | (1L << S_LB) | (1L << S_OR) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
				{
				{
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==S_OR) {
					{
					State = 63; Match(S_OR);
					}
				}

				State = 66; expr(0);
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public GroupExprContext groupExpr() {
			return GetRuleContext<GroupExprContext>(0);
		}
		public LexExprContext lexExpr() {
			return GetRuleContext<LexExprContext>(0);
		}
		public RefExprContext refExpr() {
			return GetRuleContext<RefExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case S_LP:
				{
				State = 73; groupExpr();
				}
				break;
			case S_SLASH:
			case S_LB:
			case STRING:
				{
				State = 74; lexExpr();
				}
				break;
			case IDENTIFIER:
				{
				State = 75; refExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 82;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 78;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 79; op();
					}
					} 
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public ITerminalNode S_QM() { return GetToken(RBNFParser.S_QM, 0); }
		public ITerminalNode S_ASTE() { return GetToken(RBNFParser.S_ASTE, 0); }
		public ITerminalNode S_PLUS() { return GetToken(RBNFParser.S_PLUS, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 14, RULE_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << S_ASTE) | (1L << S_QM) | (1L << S_PLUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RBNFParser.IDENTIFIER, 0); }
		public RefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterRefExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitRefExpr(this);
		}
	}

	[RuleVersion(0)]
	public RefExprContext refExpr() {
		RefExprContext _localctx = new RefExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_refExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexExprContext : ParserRuleContext {
		public SpellingExprContext spellingExpr() {
			return GetRuleContext<SpellingExprContext>(0);
		}
		public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RangeExprContext rangeExpr() {
			return GetRuleContext<RangeExprContext>(0);
		}
		public LexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterLexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitLexExpr(this);
		}
	}

	[RuleVersion(0)]
	public LexExprContext lexExpr() {
		LexExprContext _localctx = new LexExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_lexExpr);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; spellingExpr();
				}
				break;
			case S_SLASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; regexExpr();
				}
				break;
			case S_LB:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; rangeExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpellingExprContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(RBNFParser.STRING, 0); }
		public SpellingExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spellingExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterSpellingExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitSpellingExpr(this);
		}
	}

	[RuleVersion(0)]
	public SpellingExprContext spellingExpr() {
		SpellingExprContext _localctx = new SpellingExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_spellingExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		public ITerminalNode[] S_SLASH() { return GetTokens(RBNFParser.S_SLASH); }
		public ITerminalNode S_SLASH(int i) {
			return GetToken(RBNFParser.S_SLASH, i);
		}
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterRegexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitRegexExpr(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_regexExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(S_SLASH);
			State = 97; Match(S_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeExprContext : ParserRuleContext {
		public ITerminalNode S_LB() { return GetToken(RBNFParser.S_LB, 0); }
		public ITerminalNode S_RB() { return GetToken(RBNFParser.S_RB, 0); }
		public RangeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
	}

	[RuleVersion(0)]
	public RangeExprContext rangeExpr() {
		RangeExprContext _localctx = new RangeExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_rangeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(S_LB);
			State = 100; Match(S_RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupExprContext : ParserRuleContext {
		public ITerminalNode S_LP() { return GetToken(RBNFParser.S_LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode S_RP() { return GetToken(RBNFParser.S_RP, 0); }
		public GroupExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterGroupExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitGroupExpr(this);
		}
	}

	[RuleVersion(0)]
	public GroupExprContext groupExpr() {
		GroupExprContext _localctx = new GroupExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_groupExpr);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; Match(S_LP);
				State = 103; expr(0);
				State = 104; Match(S_RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; Match(S_LP);
				State = 107; Match(S_RP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public ITerminalNode[] S_SLASH() { return GetTokens(RBNFParser.S_SLASH); }
		public ITerminalNode S_SLASH(int i) {
			return GetToken(RBNFParser.S_SLASH, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(RBNFParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RBNFParser.IDENTIFIER, i);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 28, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(S_SLASH);
			State = 111; Match(IDENTIFIER);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==S_SLASH) {
				{
				{
				State = 112; Match(S_SLASH);
				State = 113; Match(IDENTIFIER);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(RBNFParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RBNFParser.IDENTIFIER, i);
		}
		public ITerminalNode[] S_DOT() { return GetTokens(RBNFParser.S_DOT); }
		public ITerminalNode S_DOT(int i) {
			return GetToken(RBNFParser.S_DOT, i);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRBNFParserListener typedListener = listener as IRBNFParserListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 30, RULE_ident);
		int _la;
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; Match(IDENTIFIER);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==S_DOT) {
					{
					{
					State = 120; Match(S_DOT);
					State = 121; Match(IDENTIFIER);
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\x85', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x5', '\x2', '$', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '*', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', '-', '\v', '\x3', '\x6', '\x3', '/', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x30', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '=', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x43', '\n', '\a', '\x3', '\a', '\a', '\a', '\x46', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'I', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'O', '\n', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', 'S', '\n', '\b', '\f', '\b', '\xE', '\b', 'V', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '_', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', 'o', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', 'u', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', 'x', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '}', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\x80', '\v', '\x11', '\x3', '\x11', '\x5', '\x11', '\x83', '\n', '\x11', 
		'\x3', '\x11', '\x2', '\x3', '\xE', '\x12', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\x2', '\x3', '\x5', '\x2', '\x5', '\x5', '\t', '\t', '\r', 
		'\r', '\x2', '\x84', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x36', '\x3', '\x2', '\x2', '\x2', '\n', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\f', '@', '\x3', '\x2', '\x2', '\x2', '\xE', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'W', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x14', '^', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '`', '\x3', '\x2', '\x2', '\x2', '\x18', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x65', '\x3', '\x2', '\x2', '\x2', '\x1C', 'n', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', 'p', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x5', '\x4', '\x3', '\x2', 
		'#', '\"', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\x2', '\x2', 
		'\x3', '&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '+', '\x5', '\x6', 
		'\x4', '\x2', '(', '*', '\a', '\b', '\x2', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\'', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x5', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x5', 
		'\b', '\x5', '\x2', '\x33', '\x35', '\x5', '\n', '\x6', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\a', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', 
		'\xF', '\x2', '\x2', '\x37', '\x38', '\x5', '\x1E', '\x10', '\x2', '\x38', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x5', ' ', '\x11', '\x2', 
		':', '<', '\a', '\xE', '\x2', '\x2', ';', '=', '\x5', '\f', '\a', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\b', '\x2', '\x2', 
		'?', '\v', '\x3', '\x2', '\x2', '\x2', '@', 'G', '\x5', '\xE', '\b', '\x2', 
		'\x41', '\x43', '\a', '\f', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x5', '\xE', '\b', '\x2', 
		'\x45', '\x42', '\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\r', '\x3', '\x2', '\x2', '\x2', 'I', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\b', '\b', '\x1', '\x2', 'K', 'O', 
		'\x5', '\x1C', '\xF', '\x2', 'L', 'O', '\x5', '\x14', '\v', '\x2', 'M', 
		'O', '\x5', '\x12', '\n', '\x2', 'N', 'J', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'T', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\f', '\x3', '\x2', '\x2', 
		'Q', 'S', '\x5', '\x10', '\t', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\t', '\x2', '\x2', 
		'\x2', 'X', '\x11', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x10', 
		'\x2', '\x2', 'Z', '\x13', '\x3', '\x2', '\x2', '\x2', '[', '_', '\x5', 
		'\x16', '\f', '\x2', '\\', '_', '\x5', '\x18', '\r', '\x2', ']', '_', 
		'\x5', '\x1A', '\xE', '\x2', '^', '[', '\x3', '\x2', '\x2', '\x2', '^', 
		'\\', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', 
		'_', '\x15', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\x11', '\x2', 
		'\x2', '\x61', '\x17', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', 
		'\a', '\x2', '\x2', '\x63', '\x64', '\a', '\a', '\x2', '\x2', '\x64', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\n', '\x2', 
		'\x2', '\x66', 'g', '\a', '\v', '\x2', '\x2', 'g', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\a', '\x3', '\x2', '\x2', 'i', 'j', '\x5', '\xE', 
		'\b', '\x2', 'j', 'k', '\a', '\x4', '\x2', '\x2', 'k', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\a', '\x3', '\x2', '\x2', 'm', 'o', '\a', '\x4', 
		'\x2', '\x2', 'n', 'h', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'o', '\x1D', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', 
		'\a', '\x2', '\x2', 'q', 'v', '\a', '\x10', '\x2', '\x2', 'r', 's', '\a', 
		'\a', '\x2', '\x2', 's', 'u', '\a', '\x10', '\x2', '\x2', 't', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 
		'~', '\a', '\x10', '\x2', '\x2', 'z', '{', '\a', '\x6', '\x2', '\x2', 
		'{', '}', '\a', '\x10', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x80', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x83', '\a', '\x10', '\x2', '\x2', '\x82', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '#', '+', '\x30', '\x34', '<', '\x42', 'G', 
		'N', 'T', '^', 'n', 'v', '~', '\x82',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
