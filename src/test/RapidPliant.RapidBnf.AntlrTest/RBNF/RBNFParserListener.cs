//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\bilsa\AppData\Roaming\RapidEditor\Extensions\Rapid_Extensions_Antlr\code_gen\201802\18\05\51\21_266\RBNFParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RBNFParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IRBNFParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.document"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument([NotNull] RBNFParser.DocumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.document"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument([NotNull] RBNFParser.DocumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.topStatements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTopStatements([NotNull] RBNFParser.TopStatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.topStatements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTopStatements([NotNull] RBNFParser.TopStatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.topStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTopStatement([NotNull] RBNFParser.TopStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.topStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTopStatement([NotNull] RBNFParser.TopStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportStatement([NotNull] RBNFParser.ImportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportStatement([NotNull] RBNFParser.ImportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.ruleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleDeclaration([NotNull] RBNFParser.RuleDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.ruleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleDeclaration([NotNull] RBNFParser.RuleDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.ruleAlts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleAlts([NotNull] RBNFParser.RuleAltsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.ruleAlts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleAlts([NotNull] RBNFParser.RuleAltsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] RBNFParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] RBNFParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOp([NotNull] RBNFParser.OpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOp([NotNull] RBNFParser.OpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.refExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRefExpr([NotNull] RBNFParser.RefExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.refExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRefExpr([NotNull] RBNFParser.RefExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.lexExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLexExpr([NotNull] RBNFParser.LexExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.lexExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLexExpr([NotNull] RBNFParser.LexExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.spellingExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSpellingExpr([NotNull] RBNFParser.SpellingExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.spellingExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSpellingExpr([NotNull] RBNFParser.SpellingExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.regexExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegexExpr([NotNull] RBNFParser.RegexExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.regexExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegexExpr([NotNull] RBNFParser.RegexExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.rangeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRangeExpr([NotNull] RBNFParser.RangeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.rangeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRangeExpr([NotNull] RBNFParser.RangeExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.groupExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGroupExpr([NotNull] RBNFParser.GroupExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.groupExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGroupExpr([NotNull] RBNFParser.GroupExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.path"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPath([NotNull] RBNFParser.PathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.path"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPath([NotNull] RBNFParser.PathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RBNFParser.ident"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdent([NotNull] RBNFParser.IdentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RBNFParser.ident"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdent([NotNull] RBNFParser.IdentContext context);
}
