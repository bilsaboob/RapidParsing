//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\bilsa\AppData\Roaming\RapidEditor\Extensions\Rapid_Extensions_Antlr\code_gen\201801\14\04\22\33_956\JSON.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class JSONParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, IDENTIFIER=5, STRING=6, WS=7, ERRCHAR=8;
	public const int
		RULE_json = 0, RULE_topDeclarations = 1, RULE_topDeclaration = 2, RULE_ruleDeclaration = 3, 
		RULE_ruleDef = 4, RULE_ruleExpressions = 5, RULE_ruleExpr = 6, RULE_regexExpr = 7, 
		RULE_refExpr = 8, RULE_spellingExpr = 9;
	public static readonly string[] ruleNames = {
		"json", "topDeclarations", "topDeclaration", "ruleDeclaration", "ruleDef", 
		"ruleExpressions", "ruleExpr", "regexExpr", "refExpr", "spellingExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'|'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "IDENTIFIER", "STRING", "WS", "ERRCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JSONParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JSONParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JSONParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class JsonContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JSONParser.Eof, 0); }
		public TopDeclarationsContext topDeclarations() {
			return GetRuleContext<TopDeclarationsContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 20; topDeclarations();
				}
			}

			State = 23; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopDeclarationsContext : ParserRuleContext {
		public TopDeclarationContext[] topDeclaration() {
			return GetRuleContexts<TopDeclarationContext>();
		}
		public TopDeclarationContext topDeclaration(int i) {
			return GetRuleContext<TopDeclarationContext>(i);
		}
		public TopDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterTopDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitTopDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public TopDeclarationsContext topDeclarations() {
		TopDeclarationsContext _localctx = new TopDeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 25; topDeclaration();
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopDeclarationContext : ParserRuleContext {
		public RuleDeclarationContext ruleDeclaration() {
			return GetRuleContext<RuleDeclarationContext>(0);
		}
		public TopDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterTopDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitTopDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TopDeclarationContext topDeclaration() {
		TopDeclarationContext _localctx = new TopDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_topDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; ruleDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JSONParser.IDENTIFIER, 0); }
		public RuleDefContext ruleDef() {
			return GetRuleContext<RuleDefContext>(0);
		}
		public RuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterRuleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitRuleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclarationContext ruleDeclaration() {
		RuleDeclarationContext _localctx = new RuleDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_ruleDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(IDENTIFIER);
			State = 33; Match(T__0);
			State = 34; ruleDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDefContext : ParserRuleContext {
		public RuleExpressionsContext ruleExpressions() {
			return GetRuleContext<RuleExpressionsContext>(0);
		}
		public RuleDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterRuleDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitRuleDef(this);
		}
	}

	[RuleVersion(0)]
	public RuleDefContext ruleDef() {
		RuleDefContext _localctx = new RuleDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_ruleDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; ruleExpressions();
			State = 37; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleExpressionsContext : ParserRuleContext {
		public RuleExprContext[] ruleExpr() {
			return GetRuleContexts<RuleExprContext>();
		}
		public RuleExprContext ruleExpr(int i) {
			return GetRuleContext<RuleExprContext>(i);
		}
		public RuleExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleExpressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterRuleExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitRuleExpressions(this);
		}
	}

	[RuleVersion(0)]
	public RuleExpressionsContext ruleExpressions() {
		RuleExpressionsContext _localctx = new RuleExpressionsContext(Context, State);
		EnterRule(_localctx, 10, RULE_ruleExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; ruleExpr();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
				{
				{
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 40; Match(T__2);
					}
				}

				State = 43; ruleExpr();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleExprContext : ParserRuleContext {
		public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RefExprContext refExpr() {
			return GetRuleContext<RefExprContext>(0);
		}
		public SpellingExprContext spellingExpr() {
			return GetRuleContext<SpellingExprContext>(0);
		}
		public RuleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterRuleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitRuleExpr(this);
		}
	}

	[RuleVersion(0)]
	public RuleExprContext ruleExpr() {
		RuleExprContext _localctx = new RuleExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_ruleExpr);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49; regexExpr();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; refExpr();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51; spellingExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterRegexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitRegexExpr(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_regexExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(T__3);
			State = 55; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JSONParser.IDENTIFIER, 0); }
		public RefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterRefExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitRefExpr(this);
		}
	}

	[RuleVersion(0)]
	public RefExprContext refExpr() {
		RefExprContext _localctx = new RefExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_refExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpellingExprContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public SpellingExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spellingExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterSpellingExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitSpellingExpr(this);
		}
	}

	[RuleVersion(0)]
	public SpellingExprContext spellingExpr() {
		SpellingExprContext _localctx = new SpellingExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_spellingExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '@', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x3', 
		'\x2', '\x5', '\x2', '\x18', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x6', '\x3', '\x1D', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x1E', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', ',', '\n', '\a', '\x3', '\a', '\a', '\a', 
		'/', '\n', '\a', '\f', '\a', '\xE', '\a', '\x32', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x37', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', ';', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\n', '&', '\x3', '\x2', '\x2', '\x2', '\f', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x36', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x12', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '=', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x5', 
		'\x4', '\x3', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\a', '\x2', '\x2', '\x3', '\x1A', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\x6', '\x4', '\x2', '\x1C', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\x5', '\b', '\x5', '\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\a', '\a', '\x2', '\x2', '#', '$', '\a', '\x3', '\x2', '\x2', '$', 
		'%', '\x5', '\n', '\x6', '\x2', '%', '\t', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x5', '\f', '\a', '\x2', '\'', '(', '\a', '\x4', '\x2', '\x2', 
		'(', '\v', '\x3', '\x2', '\x2', '\x2', ')', '\x30', '\x5', '\xE', '\b', 
		'\x2', '*', ',', '\a', '\x5', '\x2', '\x2', '+', '*', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', 
		'\x2', '-', '/', '\x5', '\xE', '\b', '\x2', '.', '+', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x37', '\x5', '\x10', '\t', '\x2', '\x34', '\x37', '\x5', '\x12', 
		'\n', '\x2', '\x35', '\x37', '\x5', '\x14', '\v', '\x2', '\x36', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\x6', '\x2', '\x2', '\x39', ':', 
		'\a', '\x6', '\x2', '\x2', ':', '\x11', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\a', '\a', '\x2', '\x2', '<', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', '\b', '\x2', '\x2', '>', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x17', '\x1E', '+', '\x30', '\x36',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
